diff --git a/optuna/storages/_base.py b/optuna/storages/_base.py
index 174fab87..d09bd1c1 100644
--- a/optuna/storages/_base.py
+++ b/optuna/storages/_base.py
@@ -17,7 +17,6 @@ from optuna.trial import TrialState
 
 DEFAULT_STUDY_NAME_PREFIX = "no-name-"
 
-
 class BaseStorage(object, metaclass=abc.ABCMeta):
     """Base class for storages.
 
diff --git a/optuna/storages/_rdb/storage.py b/optuna/storages/_rdb/storage.py
index eb605bbc..d3e91bbc 100644
--- a/optuna/storages/_rdb/storage.py
+++ b/optuna/storages/_rdb/storage.py
@@ -1272,7 +1272,7 @@ class _VersionManager(object):
 
         message = (
             "The runtime optuna version {} is no longer compatible with the table schema "
-            "(set up by optuna {}). ".format(version.__version__, version_info.library_version)
+            "(set up by optuna {}). ".format(version.__version__, current_version)
         )
         known_versions = self.get_all_versions()
         if current_version in known_versions:
diff --git a/optuna/study.py b/optuna/study.py
index 4d2cf9ca..9778378b 100644
--- a/optuna/study.py
+++ b/optuna/study.py
@@ -37,12 +37,22 @@ ObjectiveFuncType = Callable[[trial_module.Trial], Union[float, Sequence[float]]
 
 _logger = logging.get_logger(__name__)
 
+from os import path
+import time
+import inspect
+myself = lambda: str(inspect.stack()[1][3])
 
 class BaseStudy(object):
-    def __init__(self, study_id: int, storage: storages.BaseStorage) -> None:
+    def __init__(self, study_id: int, storage: storages.BaseStorage, log_db: Optional[str] = None
+) -> None:
 
         self._study_id = study_id
         self._storage = storage
+        self._log_db = log_db
+
+        if path.exists(self._log_db):
+            _logger.warning("File {} already exist. DB I/O log will be outputted on stderr".format(self._log_db))
+            self._log_db = None
 
     @property
     def best_params(self) -> Dict[str, Any]:
@@ -86,13 +96,28 @@ class BaseStudy(object):
             :exc:`RuntimeError`:
                 If the study has more than one direction.
         """
+        ts = time.time_ns()
 
         if self._is_multi_objective():
             raise RuntimeError(
                 "The best trial of a `study` is only supported for single-objective optimization."
             )
 
-        return copy.deepcopy(self._storage.get_best_trial(self._study_id))
+        x = copy.deepcopy(self._storage.get_best_trial(self._study_id))
+
+        te = time.time_ns()
+
+        # DBLOGPATH = os.getenv('DBLOGPATH')
+
+        study_name = self._storage.get_study_name_from_id(self._study_id)
+
+        if self._log_db is None:
+            _logger.info('%r %r %r %f sec' % ("DB", study_name, myself(), (te-ts)/(10 ** 9) ))
+        else:
+            with open(self._log_db, "a") as f:
+                f.write('%r,%r,%r,%f\n' % ("DB", study_name, myself(), (te-ts)/(10 ** 9) ))
+
+        return x
 
     @property
     def best_trials(self) -> List[FrozenTrial]:
@@ -200,8 +225,25 @@ class BaseStudy(object):
             A list of :class:`~optuna.FrozenTrial` objects.
         """
 
+        ts = time.time_ns()
+
         self._storage.read_trials_from_remote_storage(self._study_id)
-        return self._storage.get_all_trials(self._study_id, deepcopy=deepcopy, states=states)
+
+        x = self._storage.get_all_trials(self._study_id, deepcopy=deepcopy, states=states)
+
+        te = time.time_ns()
+
+        # DBLOGPATH = os.getenv('DBLOGPATH')
+
+        study_name = self._storage.get_study_name_from_id(self._study_id)
+
+        if self._log_db is None:
+            _logger.info('%r %r %r %f sec' % ("DB", study_name, myself(), (te-ts)/(10 ** 9) ))
+        else:
+            with open(self._log_db, "a") as f:
+                f.write('%r,%r,%r,%f\n' % ("DB", study_name, myself(), (te-ts)/(10 ** 9) ))
+
+        return x
 
 
 class Study(BaseStudy):
@@ -222,12 +264,13 @@ class Study(BaseStudy):
         storage: Union[str, storages.BaseStorage],
         sampler: Optional["samplers.BaseSampler"] = None,
         pruner: Optional[pruners.BasePruner] = None,
+        log_db: Optional[str] = None,
     ) -> None:
 
         self.study_name = study_name
         storage = storages.get_storage(storage)
         study_id = storage.get_study_id_from_name(study_name)
-        super(Study, self).__init__(study_id, storage)
+        super(Study, self).__init__(study_id, storage, log_db)
 
         self.sampler = sampler or samplers.TPESampler()
         self.pruner = pruner or pruners.MedianPruner()
@@ -412,12 +455,27 @@ class Study(BaseStudy):
             A :class:`~optuna.trial.Trial`.
         """
 
+        ts = time.time_ns()
+
         # Sync storage once every trial.
         self._storage.read_trials_from_remote_storage(self._study_id)
 
         trial_id = self._pop_waiting_trial_id()
         if trial_id is None:
             trial_id = self._storage.create_new_trial(self._study_id)
+
+        te = time.time_ns()
+
+        # DBLOGPATH = os.getenv('DBLOGPATH')
+
+        study_name = self._storage.get_study_name_from_id(self._study_id)
+
+        if self._log_db is None:
+            _logger.info('%r %r %r %f sec' % ("DB", study_name, myself(), (te-ts)/(10 ** 9) ))
+        else:
+            with open(self._log_db, "a") as f:
+                f.write('%r,%r,%r,%f\n' % ("DB", study_name, myself(), (te-ts)/(10 ** 9) ))
+
         return trial_module.Trial(self, trial_id)
 
     def tell(
@@ -1083,6 +1141,7 @@ def load_study(
     storage: Union[str, storages.BaseStorage],
     sampler: Optional["samplers.BaseSampler"] = None,
     pruner: Optional[pruners.BasePruner] = None,
+    log_db: Optional[str] = None,
 ) -> Study:
     """Load the existing :class:`~optuna.study.Study` that has the specified name.
 
@@ -1135,7 +1194,7 @@ def load_study(
 
     """
 
-    return Study(study_name=study_name, storage=storage, sampler=sampler, pruner=pruner)
+    return Study(study_name=study_name, storage=storage, sampler=sampler, pruner=pruner, log_db=log_db)
 
 
 def delete_study(
